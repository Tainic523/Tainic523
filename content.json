{"pages":[],"posts":[{"title":"博客搭建","text":"概述：使用github搭建博客 一：本地运行1：新建Github博客仓库在github上新建一个repository，仓库名字取做 github名字.github.io 例如：Tainic523.github.io 其他都不用动，直接创建。 2：安装Node.js请移步至 https://nodejs.org/zh-cn/download/ 下载安装 3：安装HEXOwindows用户打开CMD 输入以下命令进行安装 1npm install -g hexo-cli 安装完成之后可以输入 hexo 验证是否安装成功 4：初始化Hexo1hexo init 项目名 执行完毕后，在c盘-&gt;用户-&gt;用户名-&gt;项目名 路径下寻找项目文件 5：编译Hexo项目进入项目文件夹之后打开CMD输入 1hexo generate 6:本地运行Hexocmd输入 1hexo serve 7：查看效果http://localhost:4000 二：部署到Github上1：安装插件进入博客项目文件所在目录打开cmd输入 1npm install hexo-deployer-git --save 2：修改配置文件找到项目文件夹下的_config.yml文件并寻找到deploy字段 1234deploy: type: git repo: git@github.com: github名字/ github名字.github.io.git branch: master 3：执行部署1hexo deploy 等待十分钟过后访问 github名字.github.io","link":"/2019/12/18/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"title":"秋招算法题","text":"概述：秋招常见算法题Java实现 https://github.com/Tainic523/DatabaseAndSort 1：annotation注解使用annotation注解实现自动获取类信息，注解还可用于日志打印，切面等功能。 2：ConsumerAndProducer实现了常见的并发题目，包括死锁，互斥示例，阻塞队列，生产者消费者等。 2.1：AwaitSignalExample使用java并发包里面的 ReentrantLock 和 Condition 实现了互斥示例。 2.2： WaitNotifyCase使用object对象自带的wait和notify方法实现了互斥。 2.3 ：BlockingQueueExample使用LinkedList 实现了带有 阻塞的put 和 take 方法的 阻塞队列BlockingQueueExample，这个类只能存放object的对象。默认队列大小为10，构造函数可以修改阻塞队列大小。 2.4：BlockingQueueImpl使用LinkedList 和泛型 实现了带有 阻塞的put 和 take 方法的 阻塞队列，默认队列大小为10，构造函数可以修改阻塞队列大小。 2.5：ConsumerAndProducer使用 BlockingQueueImpl 实现了生产者和消费者。这里生产者和消费者线程使用的是继承 Thread 类实现的。 2.6：cyclicbarrierTestjava同步互斥工具类CyclicBarrier和CountDownLatch的测试，CyclicBarrier特点可以循环使用，CountDownLatch只可以使用一次。 2.7：DeadLockTest死锁示例，使用object对象自带的wait和notify实现死锁。 2.8：ProducerAndConsumer同样是使用 BlockingQueueImpl 实现了生产者和消费者，这里的线程是通过实现Runnable借口来完成的。 2.9：Singleton单例模式的实现，使用双重锁方式实现，线程安全。 3：DynamicProxyJDK动态代理实现。 4：graph图的相关算法，包括深度遍历，广度遍历，图使用邻接矩阵方式存储。 5：java_iojava读取文件操做 6：leetcode6.1：solution计算回文子串的数目，例：abba 中回文子串数目为1 6.2：Solution650leetcode第650题的解答 7：LRUCache7.1：LRU使用HashMap，泛型，实现LRU队列。常规方式 7.2：LRUCache使用LinkedHashMap 实现LRU队列。最简单的方式 7.3：LRUImpl使用LinkedHashMap ，List，泛型 实现LRU队列，最复杂方式。 8：model使用mybaits进行数据库连接，需要mysql数据库支持。还有Redis的测试。 9：Sort数字和字符串排序算法实现 9.1：sorttest常见数字排序算法实现，包括快排，希尔排序，插入排序，选择排序，堆排序等。 9.2：StringSolution常见字符串相关算法，包括字符串全排列，字符串的全组合，寻找最长公共子串，左旋n位字符串，最长回文子串，回文子串数目。 10：ThreadPool多线程相关实现，包括线程池，信号量等。 10.1：MultiThread多线程示例。 10.2：SemaphoreExample信号量实现同步互斥，10个任务争夺3个资源。 10.3：ThreadExcutor自己实现的线程池。 10.4：Threadimplrment使用10.3实现的线程池跑任务的示例。 10.5：ThreadPoolTest线程池示例。 10.6：ThreadTest如何创建线程。 11：Tree树相关算法，包括遍历，是否相似，求深度，广度，最短路径，镜像树，树的节点数目等。 11.1：TreeNode树的节点定义，以及树的相关算法。 11.2：Serialize树的序列化和反序列化 11.3：Main树的构造和算法测试。","link":"/2019/12/19/%E7%A7%8B%E6%8B%9B%E7%AE%97%E6%B3%95%E9%9B%86%E5%90%88/"}],"tags":[{"name":"github","slug":"github","link":"/tags/github/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"秋招","slug":"秋招","link":"/tags/%E7%A7%8B%E6%8B%9B/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"}],"categories":[{"name":"github","slug":"github","link":"/categories/github/"},{"name":"工作","slug":"工作","link":"/categories/%E5%B7%A5%E4%BD%9C/"}]}